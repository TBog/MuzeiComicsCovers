apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'
apply plugin: 'com.novoda.android-command'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.novoda.static-analysis'

buildProperties {
    signing.using(file('props/release.signing')) | file('props/debug.signing')
    secrets.using(file('props/secrets.properties')) | System.getenv()
}

def secrets = buildProperties.secrets
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId 'com.tasomaniac.muzei.comiccovers'
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode versions.versionCode
        versionName versions.versionName
        buildConfigString "GIT_SHA", gitSha

        buildConfigString "COMIC_VINE_CONSUMER_KEY", secrets['comicvine_consumer_key']
        buildConfigString "COMIC_VINE_AUTHORITY", applicationId
        manifestPlaceholders = [comicVineAuthority: applicationId]

        resConfigs "en"
    }

    signingConfigs {
        debug.storeFile file('props/debug.keystore')
        release {
            def signing = buildProperties.signing
            storeFile file("props/${signing['storeFile'].string}")
            storePassword signing['storePassword'].string
            keyAlias signing['keyAlias'].string
            keyPassword signing['keyPassword'].string
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError true
        textReport true
        textOutput 'stdout'

        fatal 'UnusedResources'
        warning 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Workaround for WorkManager alpha09: https://developer.android.com/jetpack/docs/release-notes#september_19_2018
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
}

play {
    serviceAccountEmail = secrets['play_service_account'].or('').string
    pk12File = file(secrets['play_key_file'].or('no_file.p12').string)
    track = 'alpha'
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'android.arch.work:work-runtime:1.0.0-alpha09'

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'com.google.android.apps.muzei:muzei-api:3.0.0-beta02'

    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'

    testImplementation 'junit:junit:4.12'
}
