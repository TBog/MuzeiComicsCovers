apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'

Properties local_properties = new Properties()
File localPropertiesFile = project.rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    local_properties.load(localPropertiesFile.newDataInputStream())
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.tasomaniac.muzei.comiccovers"
        minSdkVersion 17
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode rootProject.ext.versionMajor * 10000 + rootProject.ext.versionMinor * 1000 + rootProject.ext.versionPatch * 100 + rootProject.ext.versionBuild
        versionName "${rootProject.ext.versionMajor}.${rootProject.ext.versionMinor}" + ((rootProject.ext.versionPatch != 0) ? ".${rootProject.ext.versionPatch}" : "")
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""

        buildConfigField "String", "COMIC_VINE_CONSUMER_KEY", "\"" + (local_properties.comicvine_consumer_key ?: System.getenv("comicvine_consumer_key")) + "\""

        resConfigs "en"
    }

    signingConfigs {
        debug.storeFile file("../distribution/debug.keystore")
        release {
            storeFile file("../distribution/" + (local_properties.release_keystore_name ?: "debug.keystore"))
            keyAlias(local_properties.release_keystore_alias ?: "androiddebugkey")
            storePassword(local_properties.release_keystore_pwd ?: "android")
            keyPassword(local_properties.release_keystore_pwd2 ?: "android")
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError true
        textReport true
        textOutput 'stdout'

        fatal 'UnusedResources'
        warning 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

play {
    serviceAccountEmail = local_properties.play_service_account ?: ''
    pk12File = file("../distribution/" + (local_properties.play_key_file ?: 'no-file.p12'))
    track = 'alpha'
}

dependencies {
    implementation 'com.squareup.okhttp:okhttp:2.5.0'
    implementation 'com.squareup.retrofit:retrofit:1.9.0'

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'com.google.android.apps.muzei:muzei-api:2.0'

    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'

    testImplementation 'junit:junit:4.12'
}
